// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

type Storer_Expecter struct {
	mock *mock.Mock
}

func (_m *Storer) EXPECT() *Storer_Expecter {
	return &Storer_Expecter{mock: &_m.Mock}
}

// Run provides a mock function for the type Storer
func (_mock *Storer) Run() {
	_mock.Called()
	return
}

// Storer_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Storer_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *Storer_Expecter) Run() *Storer_Run_Call {
	return &Storer_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *Storer_Run_Call) Run(run func()) *Storer_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storer_Run_Call) Return() *Storer_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *Storer_Run_Call) RunAndReturn(run func()) *Storer_Run_Call {
	_c.Run(run)
	return _c
}
